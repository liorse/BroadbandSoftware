rem bug and updates report
rem 28/10/2012 replaced software accumulation mode with manual accumulation mode. Manual accumulation is a simple summation of single measurements. 
rem            Software accumulation mode was found faulty with regards to accuracy and stability, whereas single measurement was found reliable.
rem 29/10/2012 Add ContinousMeasurementFlag = 1 for continous measurement and 0 for a single measurment
rem 30/10/2012 added a delay before each single measurement and a BG before each single measurement
rem Complete and Checked  - 02/05/2013 added type of measurement entry 1-N2 2-He 3-Zero 4-Sample name
rem 02/05/2013 add concentration and concentration std 
rem            I am using an external file here name ConcentrationComm with two booleans First is Measurement On and the second measurement OFF
rem            Their initial values are 0 0. Once a measurement starts, Baes turn M ON to true, Labview reads it and starts calculating the mean,
rem            Once a measurement is done (typically 3 are done in a single measurement), Baes turns M OFF to True. Labview recieves the signal and 
rem            saves the mean and std and turn M OFF to False,The BAES will wait until M OFF returns to False and then read the concentration
rem            from the concentration file. Labview will start recalculating the mean again. This periodically transpires until
rem            Baes turns M ON to False.
rem 05/05/2013 I found that if I don't take a background before each single measurement then errors are not canceling out
rem            That is why now after each measurement I am taking one single background measurement
rem 09/06/2013 Resolved bug unable to read file
rem 28/07/2013 Fixed file not deleted
rem 15/10/2013 STD added
rem 16/10/2013 Fixed Line numbering bug and cleaned the code from previous mean calculation
rem 20/10/2013 Cleaned up code. Removed #5 temp window
rem 25/11/2013 Fixed bug that introduced a space when taking measurement earlier than 10 oclock  
 
rem recieves filename and returns the number of lines in file
function ~NumberOfLinesInFile(FileName$)
rem pseudo read
 error = read("a", d$)
 LineNumber=0
 while (read(FileName$, st$) == 0)
   if len(st$) != 255 then
    LineNumber=LineNumber+1
   endif
 rem  print LineNumber
 wend
  NumberOfLinesInFile=LineNumber
return


rem first make sure 365 (Track 2) is in upper half of the ccd and the 405 is in the lower part of the CCD (Track 1)
rem second if you want to change to order in which they print into the file
rem set acquisition paratmeters
  rem close()
 rem FilePath$="C:\Users\DMA2011\Desktop\NIR\20131215 Pahokee BAES405 and CRD\BAES 405 only\\"
 rem  FileName$="test"
  
  FilePath$="C:\Users\DMA2011\Desktop\NIR\20131225 PSL BAES405&CRD\BAES\\"
  FileName$="PSL_BAES_pushed"
  
  NumAccumulation = 22 : rem 22          :rem To avoid accumulation problem in the andor software, I am changing to single measurement in a loop of NumAccumulation (changed at 28/10/2012 2:55 PM)
  NumExposureTime =0.3      :rem sec
  ContinousMeasurementFlag =0  : rem 1 continous measurement, 0 single measurement
  NumberofMeasurementinaSingleMeasurement = 3
  
  f$= FilePath$ + FileName$ + ".txt"
  foutput$ = FilePath$ + FileName$ + "report.txt" 
  SensorTemp = -50			  :rem celcius
  TotalCavityLength405 = 94.9 :rem cm
  TotalCavityLength365 = 94.9 :rem cm
  FillLength405 = 79.7		  :rem cm
  FillLength365 = 79.7 	 	  :rem cm
  PurgeLEDside405 = 40	  :rem cc/min
  PurgeFiberSide405 = 36.6	  :rem cc/min
  PurgeLEDside365 = 43.75	  :rem cc/min
  PurgeFiberSide365 = 45.6	  :rem cc/min
  NumberOfPointsInGraph = 3000
  
  rem definition of rows which belong to either 405 or 365 cavity
  StartRow365 = 1 :rem 172
  FinishRow365 = 47 :rem 256
  StartRow405 = 172 :rem 1
  FinishRow405 = 256 :rem 47
  
  rem StartRow365 = 172
  rem FinishRow365 = 256
  rem StartRow405 = 1
  rem FinishRow405 = 47
  
  NumberOfLinesInHeader = 15
  
  rem Enter which type measurment is required
  x=key("Please select type of measurement \\1 - N2; 2 - He; 3 - Zero_N2; 4 - Zero_O2 \\5 - Zero_Air; 6 - Sample Name")
  if (x>='1') and (x<='6') then
    k=val(chr$(x))
  endif

  if (k==1) then
    print("Now taking N2 measurement ...")
    SampleName$="N2"
  endif

  if (k==2) then
    print("Now taking He measurement ...")
    SampleName$="He"
  endif

  if (k==3) then
    print("Now taking Zero_N2 measurement ...")
    SampleName$="Zero_N2"
  endif


  if (k==4) then
    print("Now taking Zero_O2 measurement ...")
    SampleName$="Zero_O2"
  endif

  if (k==5) then
    print("Now taking Zero_Air measurement ...")
    SampleName$="Zero_Air"
  endif


  if (k==6) then
    input("Please enter sample name:",SampleName$)
    outputSampleName$ ="Now taking sample " + SampleName$ + " measurement ..."
    print(outputSampleName$)
  endif
  rem End of which type measurement is required
  
  
  
  NumSeries = 1       :rem do not touch this parameter. it is here from historic reasons
  
  SetKinetics(NumExposureTime, NumAccumulation, 0, NumSeries,0)
  
  SetAcquisitionType(0)              :rem 0= Signal 1= background, 2 = reference
  SetTriggerMode(0)                  :rem Internal triggering
   SetReadOutMode(4)                  :rem Image mode
   

   
 rem  SetNumberTracks(2)		         :rem we have two cavities
 rem  SetMultiTrackHeight(80)             :rem Each track is 4 rows in height
 rem  SetTrackOffset(128)                  :rem Track positions symmetrical
  SetTemperature(SensorTemp)         : rem Set sensor temperature
  cooler(1)							 : rem Start the cooler
  SetShutter(2, 1)   				     : rem mode 2 - auto, output TTL high 1
  SetShutterTransferTime(0.05)	         : rem 50 ms to open and close
  
  
  rem setup user interface
create(#1,"365 nm Cavity",NumberOfPointsInGraph,1)
 create(#2,"405 nm Cavity",NumberOfPointsInGraph,1)
 create(#3,"365 nm Cavity",1024,1)
 create(#4,"405 nm Cavity",1024,1)
 ChangeDisplay(#1,3)
 ChangeDisplay(#2,3)
 ChangeDisplay(#3,3)
 ChangeDisplay(#4,3)
 movewindow(#1,0,0,450,450)
 movewindow(#2,0,450,450,450)
 movewindow(#3,450,0,450,450)
 movewindow(#4,450,450,450,450)

 output(900,0,450,450)
 
 SetXLabel(#4,2,1)
 SetXLabel(#3,2,1)
 
 SetXLabel(#1,5,2)
 SetXLabel(#2,5,2)
 SetXLabel(#1,5,2)
 SetXLabel(#2,5,2)
 scalex(#3,450,687)
 scalex(#4,450,687)
 scaleFlag=1
 
rem take background
rem SetKinetics(NumExposureTime, NumAccumulation, 0, 1,0)
SetSingleScan(NumExposureTime)
SetAcquisitionType(1)              :rem 0= Signal 1= background, 2 = reference
run()
movewindow(#0,900,450,450,300)
rem to take continous measurements I am placing an infinite loop here
InfiniteLoopIndex = 1
counter = 1

rem create(#5,"temp",1024,256)
rem MinimizeWindow(#5)

rem this closing of the file is need when andor has quit running in the middle of its run
rem making the concentration program keep recording.
rem to initialize the concentration program i add the following code
rem M OFF is set one to signal labview to write the mean and std of the concentration to file 
    ConcComm$="1 1"
    error=kill("C:\Users\DMA2011\Desktop\ConcentraionComm.txt")
    write("C:\Users\DMA2011\Desktop\ConcentraionComm.txt",ConcComm$)
    
    rem wait for labview to signal that data was written to concentration file by poling the M OFF flag to check if it was reset to zero
    rem I need to write this code
    while (strcomp(ConcComm$, "0 0")!=0)
 
       read("C:\Users\DMA2011\Desktop\Concentration.txt",ConcComm$)
       read("C:\Users\DMA2011\Desktop\ConcentraionComm.txt",ConcComm$)
       delay(200)
    
     wend
     
rem start main loop   
while InfiniteLoopIndex < NumberofMeasurementinaSingleMeasurement+1

rem ini to M ON True and M OFF false
  ConcComm$="1 0"
  error=kill("C:\Users\DMA2011\Desktop\ConcentraionComm.txt")
  write("C:\Users\DMA2011\Desktop\ConcentraionComm.txt",ConcComm$)
 
  close()
  
rem take background
rem SetKinetics(NumExposureTime, NumAccumulation, 0, 1,0)
SetSingleScan(NumExposureTime)
rem SetAcquisitionType(1)              :rem 0= Signal 1= background, 2 = reference
rem run()

rem take acquisition
rem SetKinetics(NumExposureTime, NumAccumulation, 0, NumSeries,0)
SetSingleScan(NumExposureTime)
SetAcquisitionType(0)              :rem 0= Signal 1= background, 2 = reference
starttime$=time$()
startdate$=date$()

rem expose camera to light!
create(#405_sig,1024,NumAccumulation)
create(#365_sig,1024,NumAccumulation)
MinimizeWindow(#405)
MinimizeWindow(#365)

rem adding standard deviation to readout 20131015
update(0)

 for NumExposure=1 to NumAccumulation
 
    SetAcquisitionType(1)              :rem 0= Signal 1= background, 2 = reference
  	run()
    SetAcquisitionType(0)              :rem 0= Signal 1= background, 2 = reference
    run()
 
   	for jindex=1 to 1024
   	  #405_sig[jindex,NumExposure]=TotalCounts(#0,jindex,jindex,StartRow405,FinishRow405)
   	  #365_sig[jindex,NumExposure]=TotalCounts(#0,jindex,jindex,StartRow365,FinishRow365)
   	next
 
  next
  rem Calculate the mean and std
  MeanStr405$=""
  StdStr405$=""
  MeanStr365$=""
  StdStr365$=""
    for jindex=1 to 1024
   	  MeanStr405$= MeanStr405$ + str$(mean(#405_sig,jindex,jindex,1,NumAccumulation))+ ", "
   	  StdStr405$ = StdStr405$ + str$(StDev(#405_sig,jindex,jindex,1,NumAccumulation))+ ", "
   	  MeanStr365$= MeanStr365$ + str$(mean(#365_sig,jindex,jindex,1,NumAccumulation))+ ", "
   	  StdStr365$ = StdStr365$ + str$(StDev(#365_sig,jindex,jindex,1,NumAccumulation))+ ", "
   	  if (jindex==589) then
   	   counts405=mean(#405_sig,jindex,jindex,1,NumAccumulation)
   	  endif
   	  
   	  if (jindex==511) then
   	    counts365=mean(#365_sig,jindex,jindex,1,NumAccumulation)
   	  endif
   	  #4[jindex]=mean(#405_sig,jindex,jindex,1,NumAccumulation)
   	  #3[jindex]=mean(#365_sig,jindex,jindex,1,NumAccumulation)
   	next
   
  rem Calculate the std 
update(1)

rem find 405 and 365 indices
delta365 = abs(xcal(#0,1)-365)
i365=1
delta405 = abs(xcal(#0,1)-405)
i405=1

for i = 2 to 1024

 if (abs(xcal(#0,i)-365)<delta365) then
   k365=i
   delta365=abs(xcal(#0,i)-365)
 endif

 if (abs(xcal(#0,i)-405)<delta405) then
   k405=i
   delta405=abs(xcal(#0,i)-405)
 endif

next  

rem change x axis according to calibration according to the outside program
coef$ = coefficient$(#0)
rem print coef$
Number$=""
lengthcoef = len(coefficient$(#0))
i=1

temp$ = left$(coef$,1)
while (strcomp(temp$, ",")!=0)
 
  Number$ = Number$ + temp$
  coef$ = right$(coef$,lengthcoef-i)
  i=i+1
   temp$ = left$(coef$,1)
wend
P1=val(Number$)



coef$ = right$(coef$,lengthcoef-i)
rem print coef$
Number$=""
temp$ = left$(coef$,1)
while (strcomp(temp$, ",")!=0)
 
  Number$ = Number$ + temp$
  i=i+1
  coef$ = right$(coef$,lengthcoef-i)
  temp$ = left$(coef$,1)
wend
P2=val(Number$)


i=i+1
coef$ = right$(coef$,lengthcoef-i)
rem  print coef$
Number$=""
temp$ = left$(coef$,1)
while (strcomp(temp$, ",")!=0)
 
  Number$ = Number$ + temp$
  i=i+1
  coef$ = right$(coef$,lengthcoef-i)
  temp$ = left$(coef$,1)
wend
P3=val(Number$)


P4= val( right$(coef$,lengthcoef-i-1))


SetCoefficient(#0,P1,P2,P3,P4)
SetCoefficient(#4,P1,P2,P3,P4)
SetCoefficient(#3,P1,P2,P3,P4)
 
rem prepare to write X axis and header
rem Total length of cavity
rem Fill length (geometrical)
rem Odd row refer to: 405 nm
rem Even row refer to: 265
rem Aquisition time:
rem Exposure time:
rem Line Number, Time Stamp, Temperature (celcius), Pressure (mbar), Concentration (N/cm^3), Counts
if (exist(f$) != 1) then
	
    write(f$, "Total length of cavity 405 (cm): ", str$(TotalCavityLength405))
	write(f$, "Total length of cavity 365 (cm): ", str$(TotalCavityLength365))
	write(f$, "Fill Length (geometrical) 405 (cm): ", str$(FillLength405))
	write(f$, "Fill Length (geometrical) 365 (cm): ", str$(FillLength365))
	write(f$, "Purge Flow LED side 405 nm (cc/min): ",str$(PurgeLEDside405))
	write(f$, "Purge Flow Fiber side 405 nm (cc/min): ",str$(PurgeFiberSide405))
	write(f$, "Purge Flow LED side 365 nm (cc/min): ",str$(PurgeLEDside365))
	write(f$, "Purge Flow Fiber side 365 nm (cc/min): ",str$(PurgeFiberSide365))
	write(f$, "Odd rows refer to 405 nm LED wavelength")
	write(f$, "Even rows refer to 365 nm LED wavelength")
	write(f$, "Acquisition parameters:")
	write(f$, "Exposure time (sec): ", str$(NumExposureTime))
	write(f$, "Accumulation :", str$(NumAccumulation))
	
	rem write x coordinate which are the wavelength in nm
	Cal$ = ""
	for i = 1 to 1024
  		Cal$ = Cal$ + str$(xcal(#0,i)) + ", "
	next
	write(f$, Cal$)
	
	rem Header for rows
	write(f$,"Line number, Measurement type, Time stamp, Temperature(deg), Temperature Uncertainty(deg), Pressure(mbar), Pressure Uncertainty(mbar, Concentration(N/cm^3), Concentration Uncertainty(N/cm^3), Counts")
	LineNumbers= NumberOfLinesInHeader
	else
	LineNumbers= ~NumberOfLinesInFile(f$)

endif

rem prepare to write Y axis
Cavity405$=""
Cavity365$=""

rem print("These Lines were written to file")
for j=1 to NumSeries


 
	rem Line number
	rem Calculate Line Number
	
	LineNumber$=str$((LineNumbers-NumberOfLinesInHeader)/2)
	Cavity365$= Cavity365$ + LineNumber$ + ", "
	Cavity405$= Cavity405$ + str$(val(LineNumber$)+1) + ", "
	 
	rem Type of measurement 	
	Cavity365$= Cavity365$ + SampleName$ + ", "
	Cavity405$= Cavity405$ + SampleName$ + ", "
	
	rem Time stamp
	if val(left$(time$(),1))==0 then
	  Cavity405$= Cavity405$ + date$() + time$() + ", "
	  Cavity365$= Cavity365$ + date$() + time$() + ", "
	else
  	  Cavity405$= Cavity405$ + date$() + " " + time$() + ", "
	  Cavity365$= Cavity365$ + date$() + " " + time$() + ", "
	endif
	
	rem M OFF is set one to signal labview to write the mean and std of the concentration to file 
    ConcComm$="1 1"
    error=kill("C:\Users\DMA2011\Desktop\ConcentraionComm.txt")
    write("C:\Users\DMA2011\Desktop\ConcentraionComm.txt",ConcComm$)
    
    rem wait for labview to signal that data was written to concentration file by poling the M OFF flag to check if it was reset to zero
    rem I need to write this code
    while (strcomp(ConcComm$, "0 0")!=0)
 
       ReadFileError=read("C:\Users\DMA2011\Desktop\Concentration.txt",ConcComm$)
       ReadFileError=read("C:\Users\DMA2011\Desktop\ConcentraionComm.txt",ConcComm$)
       delay(200)
    
     wend
     
	rem Temperature
	rem Read Temperature for temperature controller
	ReadFileError=read("C:\Users\DMA2011\Desktop\Temperature.txt",Temprature$)
    if ReadFileError<0 then
     while (ReadFileError<0)
       ReadFileError=read("C:\Users\DMA2011\Desktop\Temperature.txt",Temprature$)
       delay(200)
     wend
    endif
	Cavity405$= Cavity405$ + Temprature$ 
	Cavity365$= Cavity365$ + Temprature$ 
	
	rem Pressure
	rem Read Pressure from pressure gauge
	ReadFileError=read("C:\Users\DMA2011\Desktop\Pressure.txt",Pressure$)
    if ReadFileError<0 then
     while (ReadFileError<0)
       ReadFileError=read("C:\Users\DMA2011\Desktop\Pressure.txt",Pressure$)
       delay(200)
     wend
    endif	
	Cavity405$= Cavity405$ + Pressure$ 
	Cavity365$= Cavity365$ + Pressure$ 
	
	rem Concentration
	rem Read Concentration from CPC
	
	
    ReadFileError=read("C:\Users\DMA2011\Desktop\Concentration.txt",Concentration$)
    
    if ReadFileError<0 then
     while (ReadFileError<0)
       ReadFileError=read("C:\Users\DMA2011\Desktop\Concentration.txt",Concentration$)
       delay(200)
     wend
    endif
    
	rem ConcentrationUncertain$ = "0.0"
	Cavity405$= Cavity405$ + Concentration$ 
	Cavity365$= Cavity365$ + Concentration$	
	
	
	
	rem Counts
	update(0)
	rem for i=1 to 1024
	rem   if (i==1024) then
	rem  update(1)
	rem  endif
	    rem find the accumulated counts in column i for the 405 for column 1 to 47
	rem    temp405=0
	rem    for k=StartRow405 to FinishRow405 
	rem       temp405 = temp405 + #0(i,k)
	rem    next
	    
	rem    if (i==k405) then
	rem      counts405 = temp405/NumAccumulation
	     
	 rem   endif
	    
	rem	Cavity405$ = Cavity405$ + str$(temp405/NumAccumulation) + ", "
	rem	#4[i]=temp405/NumAccumulation
		
	rem	temp365 = 0
	rem	for k=StartRow365 to FinishRow365
	rem	  temp365 = temp365 + #0{j}(i,k)
	rem	next
		
	rem	 if (i==k365) then
	 rem     counts365 = temp365/NumAccumulation
	 rem    endif
	    
	rem	Cavity365$ = Cavity365$ + str$(temp365/NumAccumulation) + ", "
	rem	#3[i]=temp365/NumAccumulation
		
	rem next
	
	Cavity405Std$= Cavity405$ + StdStr405$
	Cavity405$ = Cavity405$ + MeanStr405$
	Cavity365Std$ = Cavity365$ + StdStr365$
	Cavity365$ = Cavity365$ + MeanStr365$
	
	
	
	if (scaleFlag==1) then
 	 		  scalex(#1,1,NumberOfPointsInGraph)
		 	  scalex(#2,1,NumberOfPointsInGraph)
		      scaledata(#2,counts405*0.5,counts405*1.5)
		      scaledata(#1,counts365*0.5,counts365*1.5)
		      rescale(#3)
	 	      rescale(#4)
		      scaleFlag=0
    endif
	 #2[counter]= counts405
	 #1[counter]= counts365
	 format(6.2)
	rem print "Start: " + startdate$ + " " + starttime$
	print (LineNumber$;"counts 365:", str$(counts365))
	print str$(val(LineNumber$) + 1) + "counts 405:" , str$(counts405)
	print "Concentration: "," ", val(left$(Concentration$,instr(Concentration$,",")-1)); " N/cm^3"
	print "Pressure: "," ", val(left$(Pressure$,instr(Pressure$,",")-1));" hpascal"
	print "Temperature: "," ", val(left$(Temprature$,instr(Temprature$,",")-1));" deg"
	print "Timestamp: " + date$() + " " + time$()
	print " "
	
	write (foutput$, SampleName$)
	write (foutput$,(LineNumber$;"counts 365:", str$(counts365)))
	write (foutput$,str$(val(LineNumber$) + 1) + "counts 405:" , str$(counts405))
	write (foutput$,"Concentration: "," ", val(left$(Concentration$,instr(Concentration$,",")-1)); " N/cm^3")
	write (foutput$,"Pressure: "," ", val(left$(Pressure$,instr(Pressure$,",")-1));" hpascal")
	write (foutput$,"Temperature: "," ", val(left$(Temprature$,instr(Temprature$,",")-1));" deg")
	write(foutput$, "Timestamp: " + date$() + " " + time$())
	write(foutput$, " ")
	LineNumbers=LineNumbers+2
	counter=counter+1
	
	if (mod(counter,NumberOfPointsInGraph)==0) then
 	for p=1 to NumberOfPointsInGraph
 	  #1(p)=0
 	  #2(p)=0
 	next
 	counter=1
 	endif
	
    write(f$, Cavity365$)
	write(f$, Cavity365Std$)
	
	write(f$, Cavity405$)
	write(f$, Cavity405Std$)
	Cavity405$=""
	Cavity365$=""
	
	rem show the data of the two cavities
	
next

rem end of infinite loop

if (ContinousMeasurementFlag==0) then
  InfiniteLoopIndex = InfiniteLoopIndex+1
endif

rem a delay for 5 minutes
rem for delaycounter=1 to 6
rem  delay(10000)
rem next
  
wend

rem End the measurement of concentration
  ConcComm$="0 0"
  error=kill("C:\Users\DMA2011\Desktop\ConcentraionComm.txt")
  write("C:\Users\DMA2011\Desktop\ConcentraionComm.txt",ConcComm$)
  
  Print("Measurement finished")